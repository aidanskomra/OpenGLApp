#version 330

in vec3 retFragPos;
in vec3 retNormal;
in vec2 retTexCoord;
in vec3 retViewDirection;

out vec4 FragColor;

struct Material
{
	float specularStrength;
	sampler2D diffuseTexture;
	sampler2D specularTexture;
};

struct Light {
    vec3 position;
    vec3 color;
    vec3 ambientColor;
    vec3 diffuseColor;
    vec3 specularColor;
};


uniform Material material;
#define NUM_LIGHTS 1
uniform Light light[NUM_LIGHTS];

void main()
{
	vec4 diffColor = texture(material.diffuseTexture, retTexCoord);
	if (diffColor.a == 0)
	{
		discard;
	}

	vec4 finalColor = vec4(0);
	for (int i = 0; i < NUM_LIGHTS; i++)
	{
	// Calculate lambertian strength
	vec3 lightDir = normalize(light[i].position - retFragPos);
	float lambertianStrength = dot(lightDir, retNormal);

	// Calculate specular strength
	vec3 refl = reflect(-lightDir, retNormal);
	float specularStrength = pow(max(dot(refl, retViewDirection), 0.0f), material.specularStrength);
	

	vec3 ambient = diffColor.rgb * light[i].ambientColor / NUM_LIGHTS;
	vec3 lambertian = lambertianStrength * diffColor.rgb * light[i].diffuseColor;
	vec3 specular = specularStrength * texture(material.specularTexture, retTexCoord).rgb * light[i].specularColor;
	finalColor += vec4(ambient + lambertian + specular, 1.0f);
	
	}

	FragColor = vec4(finalColor.rgb, diffColor.a);
}